#! /bin/bash

if [ "$LGPL2_1" == "" ]; then
  LGPL2_1=OFF
fi

echo "COMMAND	: ../FireSight/build"
echo "DATE	: `date`"
echo "LGPL2_1	: $LGPL2_1"

cv="install"

function help() {
  echo "Build FireSight (non-Windows)"
  echo 
  echo "EXAMPLES:"
  echo "  ./build"
  echo
  echo "OPTIONS:"
  echo "  -h"
  echo "  --help"
  echo "     Print this help text"
  echo "  -c install"
  echo "     Install pre-built OpenCV package if available (fast, simple). This is default."
  echo "  -c make"
  echo "     Rebuild  OpenCV from latest source code (latest code, time-consuming)"
}

while getopts "c:" flag
do
  case "$flag" in
    c) cv="$OPTARG";;

    *) help ; exit 0;;
  esac
done

if [ "$SUDO_USER" != "" ]; then
  echo "ERROR	: This script will call sudo as required and must be run by non-root user"
  echo "TRY	:   ./build"
  exit -1
fi

installPrefix=/usr

if [ "$LGPL2_1" == "ON" ]; then
  if [ -e /usr/lib/libzbar.so ]; then
    echo "STATUS	: libzbar installed"
  else
    echo "INSTALL	: apt-get install libzbar0" 
    sudo apt-get update
    sudo apt-get install -y libzbar0 
    if [ $? -ne 0 ]; then echo "ERROR	: Install failed"; exit -1; fi
    echo "INSTALL	: npm install libzbar-dev" 
    sudo apt-get install -y libzbar-dev
    if [ $? -ne 0 ]; then echo "ERROR	: Install failed"; exit -1; fi
  fi
fi

if [ `uname -o` == "Solaris" ]; then
  echo "OS	: SOLARIS"
  sudo pkgin update
  sudo crle -l /usr/local/lib -u
  sudo ln -s -f /usr/local/bin/firesight /opt/local/bin/firesight
  installPrefix=/usr/local
  if [ "$(type -p install-sh)" == "" ]; then
    echo "COMMAND	: pkgin -y install install-sh"
    sudo pkgin -y install install-sh
  else
    echo "STATUS	: install-sh installed"
  fi
fi

if [ "$(type -p gcc)" == "" ]; then
  echo "COMMAND	: pkgin -y install scmgit-base gcc47"
  sudo pkgin -y install scmgit-base gcc47
else
  echo "STATUS	: GCC installed"
fi

if [ "$(type -p cmake)" == "" ]; then
  if [ `uname -o` == "Solaris" ]; then
    echo "COMMAND	: pkgin -y install gmake; pkgin -y install cmake"
    sudo pkgin -y install gmake
    sudo pkgin -y install cmake
  else
    echo "COMMAND	: apt-get -y install cmake"
    sudo apt-get -y install cmake
  fi
else
  echo "STATUS	: cmake installed"
fi

if [ "$(type -p libtool)" == "" ]; then
  echo "COMMAND	: pkgin -y install libtool"
  sudo pkgin -y install libtool
else
  echo "STATUS	: libtool installed"
fi

if [ "$(type -p aclocal)" == "" ]; then
  echo "COMMAND	: pkgin -y install automake"
  sudo pkgin -y install automake
else
  echo "STATUS	: automake installed"
fi


grep 2.7 /usr/local/include/jansson.h
RC=$?
if [ $RC -eq 0 ]; then
	echo	"STATUS	: Jansson 2.7 installed"
else
	echo	"STATUS	: installing Jansson 2.7"
	if [ ! -e jannson ]; then
		rm -rf jannson
	fi
	git clone https://github.com/akheron/jansson 
	pushd jansson
	git checkout v2.7
	autoreconf -i
	./configure
	cmake .
	make 
	sudo -E make install
	popd
fi

#if [ -e /usr/lib/libopencv_core.so.2.3 ]; then
#  echo "STATUS	: removing OpenCV 2.3 found in /usr/lib:"
#  sudo apt-get -y remove libopencv-dev
#  if [ $? -ne 0 ]; then echo "ERROR	: Could not remove existing OpenCV 2.3"; exit -1; fi
#  sudo apt-get -y autoremove libopencv-dev
#  if [ $? -ne 0 ]; then echo "ERROR	: Could not remove existing OpenCV 2.3"; exit -1; fi
#fi
#
#if [ -e /usr/local/lib/libopencv_core.so.3.* ]; then
#  ls /usr/local/lib/libopencv_core.so.*
#  echo "ERROR	: FireSight does not yet work with OpenCV 3. Please use OpenCV 2.4.9 or earlier"
#  exit -1
#elif [ -e /usr/local/lib/libopencv_core.so.2.4.8 ]; then
#  echo "STATUS	: OpenCV found in /usr/local/lib:"
#  ls /usr/local/lib/libopencv_core.so.*
#elif [ "$cv" == "install" ]; then
#  echo "STATUS	: INSTALLING OPENCV C++ LIBRARIES "
#  if [ `uname -o` == "Solaris" ]; then
#    pkgin -y install opencv
#  elif [ "$(arch)" == "armv6l" ] && [ "$(lsb_release -is)" == "Debian" ] ;then
#    echo "SYSTEM	: Raspberry Pi with Rasbian"
#    echo "COMMAND	: sudo -E unzip -d /usr/local rpi-opencv.2.4.8.zip"
#    sudo -E unzip -d /usr/local rpi-opencv.2.4.8.zip
#  elif [ "$(type -p apt-get)" == "" ]; then
#    echo "ERROR	: apt-get is UNAVAILABLE"
#    echo "TRY	: Install OpenCV using following command:"
#    echo "TRY	:  sudo ./build -c make"
#    exit -1
#  else
#    sudo apt-get -y install libopencv-dev
#  fi
#else
#  echo "STATUS	: BUILDING  OPENCV C++ LIBRARIES" 
#  #if [ `uname -o` == "Solaris" ]; then
#    if [ "$(type -p apt-get)" != "" ] [ `uname -o` == "Solaris" ]; then
#      echo "ERROR	: apt-get: UNAVAILABLE"
#      echo "ASSUME	: (assuming OpenCV prerequisites are already on your system)..."
#    else
#      echo "STATUS	: apt-get installing openexr for libIlmImf.so.6"
#      sudo apt-get -y install openexr
#      sudo apt-get -y install libavcodec-dev
#      sudo apt-get -y install libavformat-dev
#      sudo apt-get -y install libswscale-dev
#      sudo apt-get -y install libdc1394-22
#      sudo apt-get -y install libz-dev
#    fi
#
#    if [ ! -e opencv ] ; then
#      git clone https://github.com/firepick1/opencv -b 2.4
#    fi
#    mkdir opencv/build
#    pushd opencv/build
#      cmake \
#	-D WITH_OPENEXR=OFF \
#        -D CMAKE_BUILD_TYPE=DEBUG \
#	-D CMAKE_INSTALL_PREFIX=/usr/local \
#        ..
#      sudo -E make install
#    popd
#fi

if [ -e CMakeFiles ] ; then 
  echo "STATUS	: removing existing makefiles"
  rm -rf CMakeCache.txt CMakeFiles CMakeFiles.txt target cmake_install.cmake CPackConfig.cmake CPackSourceConfig.cmake
  mkdir target
fi


echo "STATUS	: creating makefile"
cmake \
  -DBUILD_LGPL2_1=$LGPL2_1 \
  -DCMAKE_INSTALL_PREFIX:PATH=$installPrefix "$@" \
  .
RC=$?; if [ $RC -ne 0 ]; then
	echo "ERROR	: cmake failed (RC=$RC)"
	exit -1
fi
echo "STATUS	: building and installing FireSight..."
make
RC=$?; if [ $RC -ne 0 ]; then
	echo "ERROR	: make failed (RC=$RC)"
	exit -1
fi
sudo -E make install
if [ $? -ne 0 ]; then
  echo "ERROR	: make failed"
  exit -1
fi

echo "----------------------------------"
echo "DATE	: `date`"
echo "SUCCESS	: firesight installed"
